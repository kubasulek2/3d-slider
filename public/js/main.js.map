{"version":3,"sources":["main.js"],"names":["_rotationSpeed","Symbol","_clickedId","_easing","_speedMeasure","_motionData","_dynamicContent","htmlElement","constructor","element","copy","remove","this","clone","append","parent","slider3d","baseSpeed","speed","super","faces","children","start","stop","undefined","lastMeasuredAngle","speedArr","avgSpeed","isAboutToStop","currentAngle","targetAngle","move","content","calculateEntryValues","animateElement","rotationSpeed","computeRotatingTime","computeAvgSpeed","length","updateContent","applyEasing","accelerate","Math","round","window","requestAnimationFrame","css","animatePlane","rotationTime","flag","measureAngle","Date","computeEasing","distance","abs","threshold","speedChange","startEase","slowAngles","easing","delay","steps","direction","i","push","parseFloat","toFixed","forEach","value","arg","getTargetAngle","shift","reduce","a","b","e","target","shouldChangeDirection","myPlane","planeClickEvent","$","el","attr","on","currentTarget","stopPropagation","id","one","restoreAnimation","targetPlane","filter","removeClass","willUpdate","text","myElement"],"mappings":"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","file":"main.js","sourcesContent":["const\n  _rotationSpeed = Symbol('rotationSpeed'),\n  _clickedId = Symbol('clickedId'),\n  _easing = Symbol('easing'),\n  _speedMeasure = Symbol('speedMeasure'),\n  _motionData = Symbol('motionData'),\n  _dynamicContent = Symbol('dynamicContent');\n\n\nclass htmlElement {\n  constructor(element){\n    this.element = element\n  }\n  copy(){\n    return this.element.clone()\n  }\n  remove(){\n    this.element.remove()\n  }\n  append(parent){\n      this.element.append(parent)\n  }\n}\n\n\nclass slider3d extends htmlElement{\n  constructor(element ,speed){\n    super(element);\n\n    this.baseSpeed = speed > 1 ? 1 : speed;\n    this.faces = this.element.children('.face');\n\n    this[_rotationSpeed] = speed > 1 ? 1 : speed;\n    this[_clickedId] = '';\n    this[_easing] = [];\n    this[_speedMeasure] = {\n      start: undefined,\n      stop: undefined,\n      lastMeasuredAngle: undefined,\n      speedArr: [],\n      avgSpeed: undefined\n    };\n    this[_motionData] = {\n      isAboutToStop: false,\n      angleWhenClicked: undefined,\n      currentAngle: 0,\n      targetAngle: undefined,\n      move: true\n    };\n    this[_dynamicContent] = {\n      content: 1,\n      willUpdate: true\n    }\n  }\n  calculateEntryValues() {\n    this[_speedMeasure].avgSpeed = (30 / ( this.baseSpeed * 60 ) );\n  }\n\n  animateElement() {\n\n    if ( !this[_speedMeasure].avgSpeed ) this.calculateEntryValues();\n\n    if ( this[_motionData].move ){\n\n      let rotationSpeed = this.computeRotatingTime();\n\n      this.computeAvgSpeed(rotationSpeed);\n      this.updateContent();\n\n      if (this[_easing].length !== 0) this.applyEasing();\n\n      if(this[_easing].length === 0 && this[_rotationSpeed] < this.baseSpeed) this.accelerate();\n\n\n      this[_motionData].currentAngle -= this[_rotationSpeed];\n      this[_motionData].currentAngle = this[_motionData].currentAngle <= -360 ? 0 : this[_motionData].currentAngle;\n\n      this.element.css( \"transform\", ` translateZ(-250px) rotateY(${this[_motionData].currentAngle}deg)` );\n\n      // targetAngle is set in click event, so after click event rotation will stop\n\n      if( Math.round(this[_motionData].currentAngle) === this[_motionData].targetAngle ){\n        this[_motionData].move = false;\n        this.element.css( \"transform\", ` translateZ(-250px) rotateY(${this[_motionData].targetAngle}deg)` )\n      }\n\n      window.requestAnimationFrame( ()=> this.animateElement() )\n    }\n    else {\n      this.animatePlane();\n    }\n  }\n\n  computeRotatingTime(){\n\n    let currentAngle = Math.abs( Math.floor(this[_motionData].currentAngle) );\n    let rotationTime;\n    let flag = !(currentAngle % 31);\n\n    // return if current angle haven't change from last measurement\n    if (this[_speedMeasure].lastMeasuredAngle === currentAngle){\n      return null;\n    }\n\n\n    this[_speedMeasure].lastMeasuredAngle = currentAngle;\n\n\n    if(this[_speedMeasure].measureAngle === currentAngle){\n      this[_speedMeasure].stop = new Date();\n      rotationTime =  (this[_speedMeasure].stop - this[_speedMeasure].start)/1000;\n      return rotationTime;\n    }\n    //every 31 degrees start time, and angle, at which speed will be measured, are set\n    if ( flag ) {\n      this[_speedMeasure].measureAngle = this[_motionData].currentAngle === 360 ? 30 : currentAngle + 30;\n      this[_speedMeasure].start = new Date();\n    }\n    return null\n  }\n\n  computeEasing(direction){\n    let distance = Math.abs( Math.abs(this[_motionData].targetAngle) - Math.abs(this[_motionData].currentAngle) );\n\n    let steps = distance < 20 ? 5 : 10;\n    let threshold, delay, speed, speedChange, startEase, slowAngles, easing = [];\n    let baseSpeed = this[_rotationSpeed];\n\n    switch (true) {\n      case distance <= 10 :\n        delay = 0;\n        break;\n      case distance <= 20 :\n        delay = 3;\n        break;\n      case distance <= 30 :\n        delay = 8;\n        break;\n      case distance <= 40 :\n        delay = 15;\n        break;\n      case distance <= 50 :\n        delay = 24;\n        break;\n      case distance <= 60 :\n        delay = 32;\n        break;\n      case distance <= 70 :\n        delay = 40;\n        break;\n      case distance <= 80 :\n        delay = 50;\n        break;\n      case distance <= 90 :\n        delay = 60;\n        break;\n\n    }\n\n    threshold = ( distance - delay ) / steps;\n    speedChange = baseSpeed/steps;\n    speed = baseSpeed;\n    startEase = direction === \"forth\" ? this[_motionData].currentAngle - delay : this[_motionData].currentAngle + delay;\n    slowAngles = startEase;\n\n    threshold = direction === \"forth\" ? -threshold : threshold;\n\n\n    for(let i = 1; i < steps; i++){\n      slowAngles += threshold;\n      speed -= speedChange;\n\n      if ( speed > 0 ) speed = speed < 0.1 ? 0.1 : speed;\n      else speed = speed > -0.1 ? -0.1 : speed;\n\n      easing[i-1] = [];\n\n      easing[i-1].push( Math.round( slowAngles ) );\n      easing[i-1].push( parseFloat( speed.toFixed(2) ) );\n    }\n    return easing;\n\n  }\n  applyEasing(){\n\n    this[_easing].forEach(  value => {\n      if ( Math.round(this[_motionData].currentAngle) === value[0] )\n        this[_rotationSpeed] = value[1];\n    })\n  }\n\n  computeAvgSpeed(arg){\n\n    if ( arg === null ) return;\n\n    this[_speedMeasure].speedArr.push(arg);\n\n    if ( this[_speedMeasure].speedArr.length > 4 ){\n      this[_speedMeasure].speedArr.shift();\n\n    }\n    this[_speedMeasure].avgSpeed = this[_speedMeasure].speedArr.reduce((a,b) => a + b, 0) / this[_speedMeasure].speedArr.length;\n\n  }\n\n  getTargetAngle (e) {\n\n    const targetId = $(e.target).attr(\"id\");\n\n    switch (targetId) {\n      case \"front\":\n        this[_motionData].targetAngle = 0;\n        break;\n      case \"right\":\n        this[_motionData].targetAngle = -90;\n        break;\n      case \"back\":\n        this[_motionData].targetAngle = -180;\n        break;\n      case \"left\":\n        this[_motionData].targetAngle = -270;\n        break;\n    }\n  }\n\n  shouldChangeDirection(){\n    let direction = \"forth\";\n    if( this[_motionData].targetAngle === 0 ){\n      //if clicked in front plane, which set target angle to 0 , must have special check, cause current angle is always lesser than 0\n      this[_rotationSpeed] = this[_motionData].currentAngle < -180 ? this[_rotationSpeed] : -this[_rotationSpeed];\n      direction = this[_motionData].currentAngle < -180 ? \"forth\" :  \"back\"\n    } else if ( this[_motionData].currentAngle < this[_motionData].targetAngle ){\n      //all the other cases\n      this[_rotationSpeed] = -this[_rotationSpeed];\n      direction = \"back\"\n    }\n    return direction\n  }\n\n  animatePlane(){\n\n    let myPlane = this.faces.filter( ( i,el ) => $(el).attr('id') === this[_clickedId]);\n\n    myPlane.addClass(\"focus\")\n  }\n\n  planeClickEvent(){\n    this.faces.on( 'click', (e)=> {\n      if( ! this[_motionData].isAboutToStop ){\n\n        let target = $(e.currentTarget);\n        e.stopPropagation();\n        this.getTargetAngle(e);\n        this[_clickedId] = e.target.id;\n\n        let direction = this.shouldChangeDirection();\n        this[_motionData].isAboutToStop = true;\n        this[_easing] = this.computeEasing(direction);\n        this[_motionData].angleWhenClicked = this[_motionData].currentAngle;\n\n        target.css('cursor', 'initial');\n\n        $('body')\n          .css('cursor', 'pointer')\n          .one('click', (e) => {\n            this[_motionData].isAboutToStop = false;\n            target.css('cursor', 'pointer');\n            $(e.currentTarget).css('cursor', 'initial');\n            this.restoreAnimation();\n          });\n      }\n\n    })\n\n\n  }\n\n  restoreAnimation(){\n    let targetPlane = this.faces\n      .filter( ( i,el ) => $(el).attr('id') === this[_clickedId]);\n      targetPlane.removeClass(\"focus\");\n    this[_easing] = [];\n    this[_motionData].move = true;\n    this[_motionData].targetAngle = undefined;\n    this[_clickedId] = '';\n    this[_rotationSpeed] = this[_rotationSpeed] < 0 ? -this[_rotationSpeed] : this[_rotationSpeed];\n\n    targetPlane.one('transitionend',  () => {\n      this.animateElement();\n    })\n\n  }\n\n  accelerate(){\n    this[_rotationSpeed] =  parseFloat( ( this[_rotationSpeed] + 0.005 ).toFixed(3) );\n  }\n\n  updateContent(){\n\n    if ( this[_motionData].currentAngle < -10 && this[_motionData].currentAngle > -20 && this[_dynamicContent].willUpdate){\n\n      this[_dynamicContent].content = this[_rotationSpeed] > 0 ? this[_dynamicContent].content +2 : this[_dynamicContent].content;  //3/7/11...\n      this[_dynamicContent].willUpdate = false;\n\n      $(this.faces[2]).text(`face ${this[_dynamicContent].content}`);\n      $(this.faces[3]).text(`face ${this[_dynamicContent].content +1}`);\n\n    } else if (this[_motionData].currentAngle < -20 && this[_motionData].currentAngle > -30 && !this[_dynamicContent].willUpdate){\n\n      this[_dynamicContent].willUpdate = true\n\n    } else if ( this[_motionData].currentAngle < -190 && this[_motionData].currentAngle > -200 && this[_dynamicContent].willUpdate ){\n\n      this[_dynamicContent].content = this[_rotationSpeed] > 0 ? this[_dynamicContent].content +2 : this[_dynamicContent].content; // 5/9/13...\n      this[_dynamicContent].willUpdate = false;\n\n      $(this.faces[0]).text(`face ${this[_dynamicContent].content}`);\n      $(this.faces[1]).text(`face ${this[_dynamicContent].content + 1}`);\n\n    } else if ( this[_motionData].currentAngle < -200 && this[_motionData].currentAngle > -210 && !this[_dynamicContent].willUpdate){\n\n      this[_dynamicContent].willUpdate = true\n    }\n  }\n\n\n}\n\nlet myElement = new slider3d($('#top-layer'),1);\n\n$(() => {\n\n\n  myElement.animateElement();\n  myElement.planeClickEvent();\n\n});\n"]}